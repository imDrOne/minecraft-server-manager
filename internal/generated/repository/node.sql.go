// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: node.sql

package repository

import (
	"context"
)

const checkExistsNode = `-- name: CheckExistsNode :one
SELECT EXISTS (SELECT 1 FROM node WHERE host = $1 AND port = $2)
`

type CheckExistsNodeParams struct {
	Host string
	Port int32
}

func (q *Queries) CheckExistsNode(ctx context.Context, arg CheckExistsNodeParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsNode, arg.Host, arg.Port)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countNode = `-- name: CountNode :one
SELECT count(*)
FROM node
`

func (q *Queries) CountNode(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countNode)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findNodeById = `-- name: FindNodeById :one
SELECT id, host, port, created_at, updated_at
FROM node
WHERE id = $1
`

func (q *Queries) FindNodeById(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRow(ctx, findNodeById, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Host,
		&i.Port,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findNodes = `-- name: FindNodes :many
SELECT id, host, port, created_at, updated_at
FROM node
LIMIT $1 OFFSET $2
`

type FindNodesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindNodes(ctx context.Context, arg FindNodesParams) ([]Node, error) {
	rows, err := q.db.Query(ctx, findNodes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Port,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveNode = `-- name: SaveNode :one
INSERT INTO node (host, port)
VALUES ($1, $2)
RETURNING id
`

type SaveNodeParams struct {
	Host string
	Port int32
}

func (q *Queries) SaveNode(ctx context.Context, arg SaveNodeParams) (int64, error) {
	row := q.db.QueryRow(ctx, saveNode, arg.Host, arg.Port)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateNodeById = `-- name: UpdateNodeById :exec
UPDATE node
SET host = $2,
    port = $3
WHERE id = $1
`

type UpdateNodeByIdParams struct {
	ID   int64
	Host string
	Port int32
}

func (q *Queries) UpdateNodeById(ctx context.Context, arg UpdateNodeByIdParams) error {
	_, err := q.db.Exec(ctx, updateNodeById, arg.ID, arg.Host, arg.Port)
	return err
}

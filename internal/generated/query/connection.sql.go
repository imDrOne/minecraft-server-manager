// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: connection.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkExistsConnection = `-- name: CheckExistsConnection :one
SELECT EXISTS (SELECT 1 FROM connection WHERE checksum = $1)
`

func (q *Queries) CheckExistsConnection(ctx context.Context, checksum string) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsConnection, checksum)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findConnectionsById = `-- name: FindConnectionsById :many
SELECT id, node_id, key, checksum, "user", created_at, updated_at
FROM connection
WHERE node_id = $1
`

func (q *Queries) FindConnectionsById(ctx context.Context, nodeID int64) ([]Connection, error) {
	rows, err := q.db.Query(ctx, findConnectionsById, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connection
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.Key,
			&i.Checksum,
			&i.User,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveConnection = `-- name: SaveConnection :one
INSERT INTO connection (node_id, key, "user", checksum)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at
`

type SaveConnectionParams struct {
	NodeID   int64
	Key      string
	User     pgtype.Text
	Checksum string
}

type SaveConnectionRow struct {
	ID        int64
	CreatedAt pgtype.Timestamp
}

func (q *Queries) SaveConnection(ctx context.Context, arg SaveConnectionParams) (SaveConnectionRow, error) {
	row := q.db.QueryRow(ctx, saveConnection,
		arg.NodeID,
		arg.Key,
		arg.User,
		arg.Checksum,
	)
	var i SaveConnectionRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const updateConnectionById = `-- name: UpdateConnectionById :exec
UPDATE connection
SET key    = $2,
    "user" = $3
WHERE id = $1
`

type UpdateConnectionByIdParams struct {
	ID   int64
	Key  string
	User pgtype.Text
}

func (q *Queries) UpdateConnectionById(ctx context.Context, arg UpdateConnectionByIdParams) error {
	_, err := q.db.Exec(ctx, updateConnectionById, arg.ID, arg.Key, arg.User)
	return err
}

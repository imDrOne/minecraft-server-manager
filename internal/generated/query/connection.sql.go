// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: connection.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkExistsConnection = `-- name: CheckExistsConnection :one
SELECT EXISTS (SELECT 1 FROM connection WHERE "user" = $1)
`

func (q *Queries) CheckExistsConnection(ctx context.Context, user string) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsConnection, user)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findConnectionById = `-- name: FindConnectionById :one
SELECT id, node_id, encrypted_key, pub_key, "user", created_at, updated_at
FROM connection
WHERE id = $1
`

func (q *Queries) FindConnectionById(ctx context.Context, id int64) (Connection, error) {
	row := q.db.QueryRow(ctx, findConnectionById, id)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.EncryptedKey,
		&i.PubKey,
		&i.User,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findConnectionsByNodeId = `-- name: FindConnectionsByNodeId :many
SELECT id, node_id, encrypted_key, pub_key, "user", created_at, updated_at
FROM connection
WHERE node_id = $1
`

func (q *Queries) FindConnectionsByNodeId(ctx context.Context, nodeID int64) ([]Connection, error) {
	rows, err := q.db.Query(ctx, findConnectionsByNodeId, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connection
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.EncryptedKey,
			&i.PubKey,
			&i.User,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveConnection = `-- name: SaveConnection :one
INSERT INTO connection (node_id, "user")
VALUES ($1, $2)
RETURNING id, created_at
`

type SaveConnectionParams struct {
	NodeID int64
	User   string
}

type SaveConnectionRow struct {
	ID        int64
	CreatedAt pgtype.Timestamp
}

func (q *Queries) SaveConnection(ctx context.Context, arg SaveConnectionParams) (SaveConnectionRow, error) {
	row := q.db.QueryRow(ctx, saveConnection, arg.NodeID, arg.User)
	var i SaveConnectionRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const updateConnectionById = `-- name: UpdateConnectionById :exec
UPDATE connection
SET "user" = $2
WHERE id = $1
`

type UpdateConnectionByIdParams struct {
	ID   int64
	User string
}

func (q *Queries) UpdateConnectionById(ctx context.Context, arg UpdateConnectionByIdParams) error {
	_, err := q.db.Exec(ctx, updateConnectionById, arg.ID, arg.User)
	return err
}

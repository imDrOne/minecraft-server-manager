// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imDrOne/minecraft-server-manager/internal/service/connections (interfaces: NodeRepository)
//
// Generated by this command:
//
//	mockgen -destination mock_node_repo_test.go -package connections . NodeRepository
//

// Package connections is a generated GoMock package.
package connections

import (
	context "context"
	reflect "reflect"

	nodes "github.com/imDrOne/minecraft-server-manager/internal/domain/nodes"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeRepository is a mock of NodeRepository interface.
type MockNodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodeRepositoryMockRecorder
	isgomock struct{}
}

// MockNodeRepositoryMockRecorder is the mock recorder for MockNodeRepository.
type MockNodeRepositoryMockRecorder struct {
	mock *MockNodeRepository
}

// NewMockNodeRepository creates a new mock instance.
func NewMockNodeRepository(ctrl *gomock.Controller) *MockNodeRepository {
	mock := &MockNodeRepository{ctrl: ctrl}
	mock.recorder = &MockNodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeRepository) EXPECT() *MockNodeRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockNodeRepository) FindById(arg0 context.Context, arg1 int64) (*nodes.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*nodes.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockNodeRepositoryMockRecorder) FindById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockNodeRepository)(nil).FindById), arg0, arg1)
}

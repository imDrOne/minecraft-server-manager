// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imDrOne/minecraft-server-manager/internal/service (interfaces: ConnectionSshKeyRepository)
//
// Generated by this command:
//
//	mockgen -destination mock_sshkey_repo_test.go -package service . ConnectionSshKeyRepository
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	connections "github.com/imDrOne/minecraft-server-manager/internal/domain/connections"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionSshKeyRepository is a mock of ConnectionSshKeyRepository interface.
type MockConnectionSshKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionSshKeyRepositoryMockRecorder
	isgomock struct{}
}

// MockConnectionSshKeyRepositoryMockRecorder is the mock recorder for MockConnectionSshKeyRepository.
type MockConnectionSshKeyRepositoryMockRecorder struct {
	mock *MockConnectionSshKeyRepository
}

// NewMockConnectionSshKeyRepository creates a new mock instance.
func NewMockConnectionSshKeyRepository(ctrl *gomock.Controller) *MockConnectionSshKeyRepository {
	mock := &MockConnectionSshKeyRepository{ctrl: ctrl}
	mock.recorder = &MockConnectionSshKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionSshKeyRepository) EXPECT() *MockConnectionSshKeyRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConnectionSshKeyRepository) Get(context context.Context, id int64) (*connections.ConnectionSshKeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", context, id)
	ret0, _ := ret[0].(*connections.ConnectionSshKeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConnectionSshKeyRepositoryMockRecorder) Get(context, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnectionSshKeyRepository)(nil).Get), context, id)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imDrOne/minecraft-server-manager/internal/service (interfaces: SshService)
//
// Generated by this command:
//
//	mockgen -destination mock_sshkey_repo_test.go -package service . SshService
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/imDrOne/minecraft-server-manager/internal/service/ssh/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSshService is a mock of SshService interface.
type MockSshService struct {
	ctrl     *gomock.Controller
	recorder *MockSshServiceMockRecorder
	isgomock struct{}
}

// MockSshServiceMockRecorder is the mock recorder for MockSshService.
type MockSshServiceMockRecorder struct {
	mock *MockSshService
}

// NewMockSshService creates a new mock instance.
func NewMockSshService(ctrl *gomock.Controller) *MockSshService {
	mock := &MockSshService{ctrl: ctrl}
	mock.recorder = &MockSshServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshService) EXPECT() *MockSshServiceMockRecorder {
	return m.recorder
}

// InjectPublicKey mocks base method.
func (m *MockSshService) InjectPublicKey(cfg model.NodeSSHConnectionTO, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectPublicKey", cfg, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectPublicKey indicates an expected call of InjectPublicKey.
func (mr *MockSshServiceMockRecorder) InjectPublicKey(cfg, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectPublicKey", reflect.TypeOf((*MockSshService)(nil).InjectPublicKey), cfg, publicKey)
}

// Ping mocks base method.
func (m *MockSshService) Ping(cfg model.NodeSSHConnectionTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockSshServiceMockRecorder) Ping(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSshService)(nil).Ping), cfg)
}

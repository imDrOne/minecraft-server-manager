// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imDrOne/minecraft-server-manager/internal/infrastructure/connections (interfaces: ConnectionQueries)
//
// Generated by this command:
//
//	mockgen -destination mock_test.go -package connections . ConnectionQueries
//

// Package connections is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	query "github.com/imDrOne/minecraft-server-manager/internal/generated/query"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionQueries is a mock of ConnectionQueries interface.
type MockConnectionQueries struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionQueriesMockRecorder
	isgomock struct{}
}

// MockConnectionQueriesMockRecorder is the mock recorder for MockConnectionQueries.
type MockConnectionQueriesMockRecorder struct {
	mock *MockConnectionQueries
}

// NewMockConnectionQueries creates a new mock instance.
func NewMockConnectionQueries(ctrl *gomock.Controller) *MockConnectionQueries {
	mock := &MockConnectionQueries{ctrl: ctrl}
	mock.recorder = &MockConnectionQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionQueries) EXPECT() *MockConnectionQueriesMockRecorder {
	return m.recorder
}

// CheckExistsConnection mocks base method.
func (m *MockConnectionQueries) CheckExistsConnection(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsConnection", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsConnection indicates an expected call of CheckExistsConnection.
func (mr *MockConnectionQueriesMockRecorder) CheckExistsConnection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsConnection", reflect.TypeOf((*MockConnectionQueries)(nil).CheckExistsConnection), arg0, arg1)
}

// FindConnectionById mocks base method.
func (m *MockConnectionQueries) FindConnectionById(arg0 context.Context, arg1 int64) (query.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConnectionById", arg0, arg1)
	ret0, _ := ret[0].(query.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConnectionById indicates an expected call of FindConnectionById.
func (mr *MockConnectionQueriesMockRecorder) FindConnectionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConnectionById", reflect.TypeOf((*MockConnectionQueries)(nil).FindConnectionById), arg0, arg1)
}

// FindConnectionsByNodeId mocks base method.
func (m *MockConnectionQueries) FindConnectionsByNodeId(arg0 context.Context, arg1 int64) ([]query.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConnectionsByNodeId", arg0, arg1)
	ret0, _ := ret[0].([]query.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConnectionsByNodeId indicates an expected call of FindConnectionsByNodeId.
func (mr *MockConnectionQueriesMockRecorder) FindConnectionsByNodeId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConnectionsByNodeId", reflect.TypeOf((*MockConnectionQueries)(nil).FindConnectionsByNodeId), arg0, arg1)
}

// SaveConnection mocks base method.
func (m *MockConnectionQueries) SaveConnection(arg0 context.Context, arg1 query.SaveConnectionParams) (query.SaveConnectionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConnection", arg0, arg1)
	ret0, _ := ret[0].(query.SaveConnectionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveConnection indicates an expected call of SaveConnection.
func (mr *MockConnectionQueriesMockRecorder) SaveConnection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConnection", reflect.TypeOf((*MockConnectionQueries)(nil).SaveConnection), arg0, arg1)
}

// UpdateConnectionById mocks base method.
func (m *MockConnectionQueries) UpdateConnectionById(arg0 context.Context, arg1 query.UpdateConnectionByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConnectionById indicates an expected call of UpdateConnectionById.
func (mr *MockConnectionQueriesMockRecorder) UpdateConnectionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionById", reflect.TypeOf((*MockConnectionQueries)(nil).UpdateConnectionById), arg0, arg1)
}

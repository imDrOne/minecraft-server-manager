// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imDrOne/minecraft-server-manager/internal/infrastructure/nodes (interfaces: NodeQueries)
//
// Generated by this command:
//
//	mockgen -destination mock_test.go -package nodes . NodeQueries
//

// Package nodes is a generated GoMock package.
package nodes

import (
	context "context"
	reflect "reflect"

	repository "github.com/imDrOne/minecraft-server-manager/internal/generated/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeQueries is a mock of NodeQueries interface.
type MockNodeQueries struct {
	ctrl     *gomock.Controller
	recorder *MockNodeQueriesMockRecorder
	isgomock struct{}
}

// MockNodeQueriesMockRecorder is the mock recorder for MockNodeQueries.
type MockNodeQueriesMockRecorder struct {
	mock *MockNodeQueries
}

// NewMockNodeQueries creates a new mock instance.
func NewMockNodeQueries(ctrl *gomock.Controller) *MockNodeQueries {
	mock := &MockNodeQueries{ctrl: ctrl}
	mock.recorder = &MockNodeQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeQueries) EXPECT() *MockNodeQueriesMockRecorder {
	return m.recorder
}

// CheckExistsNode mocks base method.
func (m *MockNodeQueries) CheckExistsNode(arg0 context.Context, arg1 repository.CheckExistsNodeParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsNode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsNode indicates an expected call of CheckExistsNode.
func (mr *MockNodeQueriesMockRecorder) CheckExistsNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsNode", reflect.TypeOf((*MockNodeQueries)(nil).CheckExistsNode), arg0, arg1)
}

// CountNode mocks base method.
func (m *MockNodeQueries) CountNode(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNode", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNode indicates an expected call of CountNode.
func (mr *MockNodeQueriesMockRecorder) CountNode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNode", reflect.TypeOf((*MockNodeQueries)(nil).CountNode), arg0)
}

// FindNodeById mocks base method.
func (m *MockNodeQueries) FindNodeById(arg0 context.Context, arg1 int64) (repository.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodeById", arg0, arg1)
	ret0, _ := ret[0].(repository.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodeById indicates an expected call of FindNodeById.
func (mr *MockNodeQueriesMockRecorder) FindNodeById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodeById", reflect.TypeOf((*MockNodeQueries)(nil).FindNodeById), arg0, arg1)
}

// FindNodes mocks base method.
func (m *MockNodeQueries) FindNodes(arg0 context.Context, arg1 repository.FindNodesParams) ([]repository.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodes", arg0, arg1)
	ret0, _ := ret[0].([]repository.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodes indicates an expected call of FindNodes.
func (mr *MockNodeQueriesMockRecorder) FindNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodes", reflect.TypeOf((*MockNodeQueries)(nil).FindNodes), arg0, arg1)
}

// SaveNode mocks base method.
func (m *MockNodeQueries) SaveNode(arg0 context.Context, arg1 repository.SaveNodeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNode", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNode indicates an expected call of SaveNode.
func (mr *MockNodeQueriesMockRecorder) SaveNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNode", reflect.TypeOf((*MockNodeQueries)(nil).SaveNode), arg0, arg1)
}

// UpdateNodeById mocks base method.
func (m *MockNodeQueries) UpdateNodeById(arg0 context.Context, arg1 repository.UpdateNodeByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodeById indicates an expected call of UpdateNodeById.
func (mr *MockNodeQueriesMockRecorder) UpdateNodeById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeById", reflect.TypeOf((*MockNodeQueries)(nil).UpdateNodeById), arg0, arg1)
}

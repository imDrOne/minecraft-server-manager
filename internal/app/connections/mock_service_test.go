// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imDrOne/minecraft-server-manager/internal/app/connections (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination mock_service_test.go -package connections . Service
//

// Package connections is a generated GoMock package.
package connections

import (
	context "context"
	reflect "reflect"

	connections "github.com/imDrOne/minecraft-server-manager/internal/domain/connections"
	db "github.com/imDrOne/minecraft-server-manager/internal/infrastructure/connections/db"
	connections0 "github.com/imDrOne/minecraft-server-manager/internal/service/connections"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, nodeId int64, createConn db.CreateConn) (*connections0.ConnectionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, nodeId, createConn)
	ret0, _ := ret[0].(*connections0.ConnectionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, nodeId, createConn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, nodeId, createConn)
}

// FindByNodeId mocks base method.
func (m *MockService) FindByNodeId(ctx context.Context, id int64) ([]connections.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNodeId", ctx, id)
	ret0, _ := ret[0].([]connections.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNodeId indicates an expected call of FindByNodeId.
func (mr *MockServiceMockRecorder) FindByNodeId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNodeId", reflect.TypeOf((*MockService)(nil).FindByNodeId), ctx, id)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, id int64, updateConn db.UpdateConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, updateConn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, id, updateConn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, id, updateConn)
}
